---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Pritunl - Enterprise Distributed VPN Server
Parameters:
  Service:
    Type: String
    Default: 'Pritnul'
    Description: Service name for this product
  PritunlDomainHostedZoneId:
     Type: AWS::Route53::HostedZone::Id
     Description: This is the pre-exisitng domain to use, you also give access to edit this domain for the pritunlDomain if PritunlDomainAutoUpdate is true
  PritunlDomain:
    Type: String
    Description: This is the domain that pritunl vpn admin be located at
  PritunlDomainAutoUpdate:
    Type: String
    Default: "true"
    AllowedValues :
       - "true"
       - "false"
    Description: If true, it will auto create a lambda function to update the domain name
  PritunlDomainAsgNotification:
    Type: String
    Description: "Used to notify external lambda to update domain of asg ec2 instance list. note: this set  or PritunlDomainAutoUpdate:false"
#uncomment if you want ssm decription functionality
#  SSMKey:
#    Type: String
#    Description: KMS key for alias/aws/ssm
  KeyName:
    Type: String #Type: AWS::EC2::KeyPair::KeyName since session manager means you don't need ssh keys anymore
    Default: ''
    Description: Name of an existing EC2 KeyPair to enable SSH access
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  StackSize:
    Type: String
    Default: '1'
    Description: Number of Pritunl instances to create
    ConstraintDescription: Must be an integer
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Pritunl EC2 instance type
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t3.micro
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  DatabaseEnabled:
    Type: String
    Description: If false, database instance is not stood up and MongoDBDomain is used instead
    Default: "true"
    AllowedValues :
       - "true"
       - "false"
  DatabaseInstanceType:
    Type: String
    Default: m3.medium
    Description: MongoDB EC2 instance type
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t3.micro
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  MongoDBDomain:
    Type: String
    Default: db.mydomain.com:27017/pritunl
    Description: MongoDB connection URI for database if DatabaseEnabled is false
    ConstraintDescription: Must be a valid MongoDB URI
  DatabaseAuthEnabled:
    Type: String
    Default: "false"
    Description: mongodb is setup without auth, once manually set #then update ssm location and update the template on this value
    AllowedValues :
       - "true"
       - "false"
  DatabaseUsername:
    Type : "String" #'AWS::SSM::Parameter::Value<String>'
    Description: DatabaseAuthEnabled if set tell pritunl the database username #set ssm location /config/Pritnul/databaseUsername
    Default: "pritunl" #"/config/pritunl/databaseUsername"
  DatabasePassword:
    Type : "String" #'AWS::SSM::Parameter::Value<String>'
    Description: DatabaseAuthEnabled if set tell pritunl the database password #set ssm location /config/Pritnul/databasePassword
    Default: "" #"/config/Pritnul/databasePassword"
    NoEcho: true
  DatabaseUseSSL:
    Type : "String" #'AWS::SSM::Parameter::Value<String>'
    Description: DatabaseAuthEnabled if set tell pritunl the database requires #ssl set ssm location /config/Pritnul/databaseUseSSL
    Default: "false" #"/config/Pritnul/databaseUseSSL"
    AllowedValues :
       - "true"
       - "false"
  DatabaseAuthSource:
    Type : String
    Default: admin
    Description: DatabaseAuthEnabled if set tell pritunl which auth source of the mongo db table
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id of existsing VPC
    ConstraintDescription: Must be the Id of an existing VPC
  DatabaseVpcSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: The SubnetId in your VPC to launch MongoDB instance
    ConstraintDescription: Must be an existing subnet in VPC
  VpcSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your VPC to launch Pritunl instances
    ConstraintDescription: Must be a list of existing subnets in VPC
  PublicIpEnabled:
    Type: String
    Description: true or false for enabling public ip for instances (ensure nat gateway is attached if false)
    Default: 'true'
    AllowedValues :
       - "true"
       - "false"
  DatabasePublicIpEnabled:
    Type: String
    Description: true or false for enabling public ip for database (ensure nat gateway is attached if false)
    Default: 'true'
    AllowedValues :
       - "true"
       - "false"
  AdminPort:
    Type: Number
    Description: what port is the admin system running on
    Default: 443
  AdminCidrRange:
    Type: String
    Description: cidr range to lock down admin mangement
    Default: "0.0.0.0/0"
  VPNUdpMinRange:
    Type: String
    Default: '10000'
  VPNUdpMaxRange:
    Type: String
    Default: '19999'
  VPNUdpCidrRange:
    Type: String
    Default: "0.0.0.0/0"
  VPNTcpMinRange:
     Type: String
     Default: '8443'
  VPNTcpMaxRange:
     Type: String
     Default: '8443'
  VPNTcpCidrRange:
    Type: String
    Default: "0.0.0.0/0"  #change to internal ip range to disable tcp

Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    AMI:
      HVM64: "amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2"
    us-east-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-0080e4c5bc078760e
      HVMG2: NOT_SUPPORTED
    us-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-01e24be29428c15b2
      HVMG2: NOT_SUPPORTED
    us-west-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-08935252a36e25f85
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-0cfbf4f6db41068ac
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-05b3bcf7f311194b3
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-00a5245b4816c38e6
      HVMG2: NOT_SUPPORTED
    ap-southeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-02fd0b06f06d93dfc
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-05145e0b28ad8e0b2
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-f239abcb
      HVMG2: NOT_SUPPORTED
    us-gov-west-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-41b2d362
      HVMG2: NOT_SUPPORTED
Conditions:
  hasKeyName:
    !Not [ !Equals [ !Ref KeyName , '']]
  hasDatabaseEnabled:
    !Equals [ !Ref DatabaseEnabled, 'true' ]
  hasPritunlDomainAutoUpdate:
    !Equals [ !Ref PritunlDomainAutoUpdate, 'true' ]
  NoAsgNotify:
    !And [ !Equals [ !Ref PritunlDomainAutoUpdate, 'false' ],  !Equals [ !Ref PritunlDomainAsgNotification, '' ]]
  AsgNotify:
    !Or [ !Equals [ !Ref PritunlDomainAutoUpdate, 'true' ],  !Not [ !Equals [ !Ref PritunlDomainAsgNotification, '' ]]]

Resources:
  PritunlInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess
      Policies:
      - PolicyName: Pritunl-CustomPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - cloudwatch:PutMetricData
            - cloudwatch:GetMetricStatistics
            - cloudwatch:ListMetrics
            - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            - logs:CreateLogStream
            - logs:DescribeLogStreams
            - logs:DescribeLogGroups
            Resource: !Sub "arn:aws:logs:*:*:log-group:/aws/${AWS::StackName}*"
          - Effect: Allow
            Action:
            - ssm:DescribeParameters
            Resource: "*"
          - Effect: Allow
            Action:
            - ssm:GetParameters
            - ssm:GetParameter
            - ssm:GetParametersByPath
            Resource:
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}"
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}/*"
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}_*"
            - !Sub "arn:aws:ssm:*:*:parameter/config/${Service}_*/*"
#uncomment if you want ssm decription functionality
#          - Effect: Allow
#            Action:
#            - kms:Decrypt
#            Resource:
#            - Ref: SSMKey
          - Effect: Allow
            Action:
            - ssm:UpdateInstanceInformation
            - ssmmessages:CreateControlChannel
            - ssmmessages:CreateDataChannel
            - ssmmessages:OpenControlChannel
            - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetEncryptionConfiguration
            Resource: '*'
          - Effect: Allow
            Action:
            - kms:GenerateDataKey
            Resource: '*'
          - Effect: Allow
            Action:
            - route53:ListHostedZones
            - route53:ListHostedZonesByName
            - route53:GetChange
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - route53:ChangeResourceRecordSets
            Resource:
            - !Sub "arn:aws:route53:::hostedzone/${PritunlDomainHostedZoneId}"
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: PritunlInstanceRole

  DatabaseInstance:
    Condition: hasDatabaseEnabled
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Update
          - SSM
          - AWSLogs
          - AWSLogsPart2
          - Setup
          - Install
          - Configure
        Update:
          commands:
            update_system:
              command: yum update -y
        SSM:
          commands:
            00-yum-install-agent:
              command: yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              ignoreErrors: true
            01-verify-running:
              command: status amazon-ssm-agent
              ignoreErrors: true
            02-start-anyway:
              command: start amazon-ssm-agent
              ignoreErrors: true
        AWSLogs:
          files: #before we install awslogs as we cfn-init files can't overide existing files
            "/etc/awslogs/awslogs.conf":
              content: |
                [general]
                state_file = /var/lib/awslogs/agent-state
              mode: '000644'
              owner: root
              group: root
            "/etc/awslogs/config/pritunl_custom.conf":
              content:
                !Sub  |
                  [cfn-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cfn-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cfn-init.log

                  [cloud-init-output.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init-output.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init-output.log

                  [cloud-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init.log

                  [/var/log/mongodb/mongod.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/mongodb/mongod.log
                  log_stream_name={instance_id}
                  file=/var/log/mongodb/mongod.log*

              mode: '000644'
              owner: root
              group: root
        AWSLogsPart2:
          packages:
            yum:
              awslogs: []
          commands:
            01_set_region:
              command: !Sub "sed -i 's/us-east-1/${AWS::Region}/g'  /etc/awslogs/awscli.conf"
            01_start_awslogs:
              command: service awslogs restart
              ignoreErrors: true #if we run this script a second time it won't fail
            01_start_awslogs_onreboot:
              command: chkconfig awslogs on
        Setup:
          files:
            "/etc/yum.repos.d/mongodb-org-3.0.repo":
              content:
                !Sub |
                  [mongodb-org-4.0]
                  name=MongoDB Repository
                  baseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/
                  gpgcheck=1
                  enabled=1
                  gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc
              mode: '000644'
              owner: root
              group: root
        Install:
          packages:
            yum:
              mongodb-org: []
        Configure:
          commands:
            01_conf_mongodb:
              command: "sed -i 's/bindIp: 127.0.0.1/bindIp: 0.0.0.0/g' /etc/mongod.conf"
            02_start_mongodb:
              command: service mongod restart
            02_start_onreboot:
              command: chkconfig mongod on
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      KeyName:
        Fn::If:
          - hasKeyName
          - Ref: KeyName
          - Ref: AWS::NoValue
      IamInstanceProfile:
        Ref: Ec2InstanceProfile
      NetworkInterfaces:
      - AssociatePublicIpAddress: !Ref DatabasePublicIpEnabled
        DeviceIndex: '0'
        GroupSet:
        - Ref: DatabaseSecurityGroup
        SubnetId:
          Ref: DatabaseVpcSubnet
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: '32'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v   --stack "${AWS::StackName}" --resource DatabaseInstance --configsets InstallAndRun --region ${AWS::Region}
            # Signal the status from cfn-init\n"
            /opt/aws/bin/cfn-signal -e $?   --stack "${AWS::StackName}"  --resource DatabaseInstance  --region ${AWS::Region}
      Tags:
        -
          Key: Name
          Value: !Sub
            - "${StackName}-database"
            - StackName: !Ref AWS::StackName
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

  PritunlScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      VPCZoneIdentifier:
        Ref: VpcSubnets
      LaunchConfigurationName:
        Ref: PritunlLaunchConfig
      MinSize:
        Ref: StackSize
      MaxSize:
        Ref: StackSize
      DesiredCapacity:
        Ref: StackSize
      Tags:
        -
          Key: Name
          Value: !Sub
            - "${StackName}-instance"
            - StackName: !Ref AWS::StackName
          PropagateAtLaunch: true
        -
          Key: DomainMeta
          Value: !Sub "${PritunlDomainHostedZoneId}:${PritunlDomain}"
          PropagateAtLaunch: false
      NotificationConfigurations:
        Fn::If:
          - NoAsgNotify
          - !Ref AWS::NoValue
          - -  TopicARN: !If [ hasPritunlDomainAutoUpdate, !Ref ASGtoRoute53UpdateSNSTopic, !Ref PritunlDomainAsgNotification ]
               NotificationTypes:
               - autoscaling:EC2_INSTANCE_LAUNCH
               - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
               - autoscaling:EC2_INSTANCE_TERMINATE
               - autoscaling:EC2_INSTANCE_TERMINATE_ERROR

  PritunlLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Update
          - SSM
          - AWSLogs
          - AWSLogsPart2
          - CfnHup
          - Setup
          - Install
          - Configure
        Update:
          commands:
            update_system:
              command: yum update -y
        SSM:
          commands:
            00-yum-install-agent:
              command: yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              ignoreErrors: true
            01-verify-running:
              command: status amazon-ssm-agent
              ignoreErrors: true
            02-start-anyway:
              command: start amazon-ssm-agent
              ignoreErrors: true
        AWSLogs:
          files:
            "/etc/awslogs/awslogs.conf":
              content: |
                [general]
                state_file = /var/lib/awslogs/agent-state
              mode: '000644'
              owner: root
              group: root
            "/etc/awslogs/config/pritunl_custom.conf":
              content:
                !Sub  |
                  [cfn-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cfn-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cfn-init.log

                  [cloud-init-output.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init-output.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init-output.log

                  [cloud-init.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/cloud-init.log
                  log_stream_name={instance_id}
                  file=/var/log/cloud-init.log

                  [/var/log/pritunl.log]
                  log_group_name=/aws/${AWS::StackName}/var/log/pritunl.log
                  log_stream_name={instance_id}
                  file=/var/log/pritunl.log*

              mode: '000644'
              owner: root
              group: root
        AWSLogsPart2:
          packages:
            yum:
              awslogs: []
          commands:
            01_set_region:
              command: !Sub "sed -i 's/us-east-1/${AWS::Region}/g'  /etc/awslogs/awscli.conf"
            02_start_awslogs:
              command: service awslogs restart
              ignoreErrors: true
            03_start_awslogs_onreboot:
              command: chkconfig awslogs on
        CfnHup: #allows cloudformation to update the instances post creation.
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.PritunlLaunchConfig.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource PritunlLaunchConfig --configsets InstallAndRun --region ${AWS::Region}
                  runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        Setup:
          files:
            "/etc/yum.repos.d/pritunl.repo":
              content:
                !Sub |
                  [pritunl]
                  name=Pritunl Repository
                  baseurl=https://repo.pritunl.com/stable/yum/centos/7/
                  gpgcheck=1
                  enabled=1
              mode: '000644'
              owner: root
              group: root
          commands:
            00-keycollect:
              command: gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 7568D9BB55FF9E5287D586017AE645C0CF8E292A
            01-getkey:
              command: gpg --armor --export 7568D9BB55FF9E5287D586017AE645C0CF8E292A > /tmp/key.tmp
            02-importkey:
              command: rpm --import /tmp/key.tmp
            03-rmkey:
              command: rm -f /tmp/key.tmp
        Install:
          packages:
            yum:
              python27: []
              pritunl: []
          files:
            "/etc/pritunl.conf":
              content:
                Fn::If:
                  - hasDatabaseEnabled
                  - !Sub |
                    {
                        "bind_addr": "0.0.0.0",
                        "log_path": "/var/log/pritunl.log",
                        "temp_path": "/tmp/pritunl_%r",
                        "local_address_interface": "auto",
                        "mongodb_uri": "mongodb://${DatabaseInstance.PrivateIp}:27017/pritunl",
                        "port": "${AdminPort}"
                    }
                  - !Sub |
                    {
                        "bind_addr": "0.0.0.0",
                        "log_path": "/var/log/pritunl.log",
                        "temp_path": "/tmp/pritunl_%r",
                        "local_address_interface": "auto",
                        "mongodb_uri": "mongodb://${MongoDBDomain}",
                        "port": "${AdminPort}"
                    }
              mode: '000644'
              owner: root
              group: root
        Configure:
          commands:
            00_auth_pritunl: #if DatabaseAuthEnabled not false, then add auth
              command:
                 Fn::If:
                   - hasDatabaseEnabled
                   - !Sub "check=${DatabaseAuthEnabled}; if [ \"$check\" != 'false' ]; then sed -i 's|\"mongodb_uri\":.*$|\"mongodb_uri\": \"mongodb://${DatabaseUsername}:${DatabasePassword}@${DatabaseInstance.PrivateIp}:27017/pritunl?authSource=${DatabaseAuthSource}\\&ssl=${DatabaseUseSSL}\",|g' /etc/pritunl.conf  ; else echo 'no change auth'; fi"
                   - !Sub "check=${DatabaseAuthEnabled}; if [ \"$check\" != 'false' ]; then sed -i 's|\"mongodb_uri\":.*$|\"mongodb_uri\": \"mongodb://${DatabaseUsername}:${DatabasePassword}@${MongoDBDomain}?authSource=${DatabaseAuthSource}\\&ssl=${DatabaseUseSSL}\",|g' /etc/pritunl.conf ; else echo 'no change auth'; fi"
            01_start_pritunl:
              command: start pritunl
              ignoreErrors: true
            02_set_admin_port:
              command: !Sub "pritunl set app.server_port ${AdminPort}"
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: PritunlSecurityGroup
      AssociatePublicIpAddress: !Ref PublicIpEnabled
      KeyName:
        Fn::If:
          - hasKeyName
          - Ref: KeyName
          - Ref: AWS::NoValue
      IamInstanceProfile:
        Ref: Ec2InstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack "${AWS::StackName}" --resource PritunlLaunchConfig  --configsets InstallAndRun --region "${AWS::Region}"
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack "${AWS::StackName}" --resource PritunlLaunchConfig --region "${AWS::Region}"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MongoDB Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '27017'
        ToPort: '27017'
        SourceSecurityGroupId:
          Ref: PritunlSecurityGroup
  PritunlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Pritunl Security Group
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp #this is for letsencrypt
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: !Ref VPNTcpMinRange
        ToPort: !Ref VPNTcpMaxRange
        CidrIp: !Ref VPNTcpCidrRange
      - IpProtocol: tcp
        FromPort: !Ref AdminPort
        ToPort: !Ref AdminPort
        CidrIp: !Ref AdminCidrRange
      - IpProtocol: udp
        FromPort: !Ref VPNUdpMinRange
        ToPort: !Ref VPNUdpMaxRange
        CidrIp: !Ref VPNUdpCidrRange

  ASGtoRoute53UpdateSNSTopic:
    Condition: hasPritunlDomainAutoUpdate
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ASGtoRoute53Update

  LambdaASGtoRoute53Update:
    Condition: hasPritunlDomainAutoUpdate
    Type: 'AWS::Serverless::Function'
    DependsOn:
      - LambdaASGtoRoute53UpdateRole
    Properties:
      #FunctionName: LambdaASGtoRoute53Update
      InlineCode: |
        var AWS=require("aws-sdk"),nextTick=function(e){"function"==typeof setImmediate?setImmediate(e):"undefined"!=typeof process&&process.nextTick?process.nextTick(e):setTimeout(e,0)},makeIterator=function(e){var n=function(o){var t=function(){return e.length&&e[o].apply(null,arguments),t.next()};return t.next=function(){return o<e.length-1?n(o+1):null},t};return n(0)},_isArray=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},waterfall=function(e,n){if(n=n||function(){},!_isArray(e)){var o=new Error("First argument to waterfall must be an array of functions");return n(o)}if(!e.length)return n();var t=function(e){return function(o){if(o)n.apply(null,arguments),n=function(){};else{var r=Array.prototype.slice.call(arguments,1),s=e.next();s?r.push(t(s)):r.push(n),nextTick(function(){e.apply(null,r)})}}};t(makeIterator(e))()};
        exports.handler=function(e,n){console.log(e);var o=JSON.parse(e.Records[0].Sns.Message),t=o.AutoScalingGroupName,r=(o.EC2InstanceId,o.Event);if(console.log(r),"autoscaling:EC2_INSTANCE_LAUNCH"===r||"autoscaling:EC2_INSTANCE_TERMINATE"===r){console.log("Handling Launch/Terminate Event for "+t);var s=process.env.AWS_DEFAULT_REGION;console.log(s);var a=new AWS.AutoScaling({region:s}),c=new AWS.EC2({region:s}),l=new AWS.Route53;
        waterfall([function(e){console.log("Describing ASG Tags"),a.describeTags({Filters:[{Name:"auto-scaling-group",Values:[t]},{Name:"key",Values:["DomainMeta"]}],MaxRecords:1},e)},
        function(e,n){console.log("Processing ASG Tags"),console.log(e.Tags),0==e.Tags.length&&n("ASG: "+t+" does not define Route53 DomainMeta tag.");var o=e.Tags[0].Value.split(":"),r={HostedZoneId:o[0],RecordName:o[1]};console.log(r),n(null,r)},
        function(e,n){console.log("Retrieving Instances in ASG"),a.describeAutoScalingGroups({AutoScalingGroupNames:[t],MaxRecords:1},function(o,t){n(o,e,t)})},
        function(e,n,o){console.log(n.AutoScalingGroups[0]);var t=n.AutoScalingGroups[0].Instances.map(function(e){return e.InstanceId});c.describeInstances({DryRun:!1,InstanceIds:t},
        function(n,t){o(n,e,t)})},function(e,n,o){console.log(n.Reservations);var t=n.Reservations.map(function(e){return{Value:e.Instances[0].NetworkInterfaces[0].Association.PublicIp}});console.log(t),l.changeResourceRecordSets({ChangeBatch:{Changes:[{Action:"UPSERT",ResourceRecordSet:{Name:e.RecordName,Type:"A",TTL:10,ResourceRecords:t}}]},HostedZoneId:e.HostedZoneId},o)}],
        function(e){e?console.error("Failed to process DNS updates for ASG event: ",e):console.log("Successfully processed DNS updates for ASG event."),n.done(e)})}else console.log("Unsupported ASG event: "+t,r),n.done("Unsupported ASG event: "+t,r)};
      Description: !Sub 'Asg to Route53 record domain update'
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaASGtoRoute53UpdateRole.Arn
      Runtime: nodejs8.10
      Timeout: 20
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic:
              Ref: ASGtoRoute53UpdateSNSTopic

  # Has either AsgToRoute53EditPolicy attached for route53 edit rights
  LambdaASGtoRoute53UpdateRole:
    Condition: hasPritunlDomainAutoUpdate
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  AsgToRoute53EditPolicy:
    Condition: hasPritunlDomainAutoUpdate
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "AsgToRoute53EditPolicy"
      Roles:
        -
          !Ref LambdaASGtoRoute53UpdateRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - route53:ListHostedZones
          - route53:GetChange
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - route53:ChangeResourceRecordSets
          Resource:
            - !Sub "arn:aws:route53:::hostedzone/${PritunlDomainHostedZoneId}"

